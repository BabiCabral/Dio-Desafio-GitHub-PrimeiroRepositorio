##Paradigmas de Programação:##

Cada paradigma surgiu de necessidades diferentes. Dado isso, cada um apresenta maiores vantagens sobre outros dentro do desenvolvimento de determinado sistema.

Dentre esses paradigmas estão: A Programação Orientada a Objetos (POO) e a Programação Estruturada (PE).

Programação estruturada (PE):

Tem como principal caracteristca a sua interpretaão linha por linha, em pequenos trechos de código, podendo eles não estar em uma ordem espcífica. Há três tipos de estruturas básicas para navegar pelo código: **sequência, seleção e repetição.**

- Sequência: São os comandos a serem executados de cima para baixo, linha a linha, do programa, de forma sequuencial;
- Seleções: sequências que só devem ser executadas se uma condição for satisfeita (exemplos: if - else, switch e comandos parecidos);
- Repetições: sequeências que devem ser executadas repetidamente até uma condição for satisfeita (for, while, do-while, etc).

Programa de Orientaão a objetos:

é baseada no conceito de "objetos", que podem conter dados na forma de campos (atributos) e códigos, na forma de procedimentos (métodos). Uma característica é que um procedimento de objeto pode acessar, e geralmene modificar, os campos de dados do objeto com o qual eles estão associados e cada um pode receber, processar e enviar dados, podendo ser vistos como uma máquina independente.

para que uma linguagem possa ser considerada orientada a objeto é preciso atender a quatro tópicos bastante importantes, e esses tópicos é o que são chamados de "Os 4 pilares da Progrmação orientada a objetos". São eles:

- Abstração;
- Encapsulamento;
- Herança;
- Polimorfismo.

A importância da POO é simples e direta. Tudo em .NET é objeto mesmo os tipos de dados mais simples são considerados objetos, já estes também contém métodos e propriedades. Implicitamente, todo e qualquer tipo ou objeto em .NET possui um ancestral comum.

---------------

## Principais conceitos de classes, objetos e visibilidade##

### Classes###

Pode ser considerado como se fosse um molde para o objeto, contendo dentro de si a principais informações para a sua criação. Define os atributos e métodos comuns que serão compartilhados por um objeto.

 ### Objetos###

Na programação o objeto é ja instanciação (criação a partir) de uma classe. Para criarmos ou "instanciarmos" objetos de uma determinada classe, utilizamos o operador *new*.

Exemplo:

`Produto obj = new Produto ( );`

### Visibilidade###

A visibilidade é importante para a proteção do código e suas funcionalidades, define quem pode alterar cada dado dos trechos de código em três principais níveis:

- Pública (representada pelo símbolo "+");
- Privada (representada pelo símbolo "'-'");
- Protegida (representada pelo símbolo "#");

Isso evita a confusão do uso de variáveis globais no programa, deixando mais fácil de identificar em qual estado cada variável vai estar a cada momento do programa, já que a restrição de acesso nos permite identificar quem consegue modificá-la.

------------------------

## Tipos por Valor, Referência e Ponteiro

### Tipos por Valor

São gerenciados diretamente e têm as seguintes caracteristicas principais:

- Todos os tipos de dados numéricos.
- Não precisam ser iniciaizados com o operador **new**
- A variáve armazena o valor diretamente
- Atribuiçao de uma variável a outra copia o conteudo, criando efetivamente outra cópia da variável.
- Não podem conter o valor null.
- Exemplos de variáveis desse tipo são: integers (inteiros) , doubles, floats e char.

### Tipos de referência

Um tipo por referência armazena uma referência a seus dados. Os tipos de referência incluem o seguinte:

- Duas variáveis poderem conter a referência a um mesmo objeto.
- Operações em uma afetarem a outra.
- Todas as matrizes, mesmo que seus elementos sejam de tipos de valor.
- Exemplos de tipos por referência: Strings, classes e arrays.

### Tipo Ponteiro

Um ponteiro ou apontador é um tipo de dado cujo valor se refere diretamente a um outro valor alocado em outra área da memória através de seu endereço.

--------------

## Métodos e tipos de métodos

### Métodos

Determinam o comportamento dos objetos de uma classe e são capazes de controlar o estado da instância. São funções que realizam tarefas. Eles podem ou não retornar valores, e podem ou não receber parâmetros.

O envio de mensagens (chamada de métodos) pode alterar o estado de um objeto Esses métodos temos como difundidos os Getters, Os Setters e o Construct.

Os **Getters** ou **métodos acessorres** solicitam o acesso a informações de um determinado produto sem dar acesso diretamente a ele, colocando ali uma barreira de proteção para os dados.

Os **Setters** ou **métodos modificadores** enviam o pedido de alteração de uma determinada informação de um objeto sem que se altere diretamente o mesmo.

A função **Construct** ou **método construtor** é inicializar ou dar forma à classe. É nele que indicamos os valores dos campos de uma classe. Esses valores podem ser internos (no código) ou externos (passados por parâmetros). 

As regras para definição de um construtor são:

- O construtor deve ter o mesmo nome da classe;
- Não tem tipo de retorno;
- É executado apenas um, apenas uma vez, no momento da criação do objeto;
- Não pode ser chamado diretamente;
- Deve ser "public";